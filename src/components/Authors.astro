---
import type { Author } from "../types/types";

interface Props {
  authors: Author[];
}

const { authors } = Astro.props;

const institutionNumbers = new Map<string, number>();
const orderedInstitutions: string[] = [];

for (const author of authors) {
  if (!author.institution) continue;
  if (!institutionNumbers.has(author.institution)) {
    const index = orderedInstitutions.push(author.institution);
    institutionNumbers.set(author.institution, index);
  }
}
---

<div class="links flex flex-row flex-wrap justify-center gap-x-8 gap-y-4">
  {
    authors.map((author) => (
      <div class="flex flex-col items-center text-center" key={author.name}>
        <div class="flex flex-row items-baseline text-xl">
          {author.url ? <a href={author.url}>{author.name}</a> : author.name}
          {author.institution && (
            <sup class="ml-1 text-sm">
              {institutionNumbers.get(author.institution)}
            </sup>
          )}
          {author.notes && (
            <sup class="ml-1 text-sm">
              {author.notes.map(
                (note, index, array) =>
                  note + (index < array.length - 1 ? "," : ""),
              )}
            </sup>
          )}
        </div>
      </div>
    ))
  }
</div>

{orderedInstitutions.length > 0 && (
  <div class="mt-4 flex flex-row flex-wrap justify-center gap-x-4 gap-y-1 text-sm text-center">
    {orderedInstitutions.map((institution, index) => (
      <div class="flex items-baseline gap-1" key={institution}>
        <sup>{index + 1}</sup>
        <span>{institution}</span>
      </div>
    ))}
  </div>
)}
